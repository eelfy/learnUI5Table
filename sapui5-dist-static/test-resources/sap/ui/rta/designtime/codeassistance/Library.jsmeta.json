{"!name":"sap.ui.rta","!version":"1.20.0","!define":{"sap.ui.rta":{"enablement":"sap.ui.rta.enablement","util":"sap.ui.rta.util","service":"sap.ui.rta.service","origin":{"!description":"Receiving window origin; a valid origin has to be specified, see {@link https://html.spec.whatwg.org/multipage/origin.html#origin}","!category":"enum","!type":"String"},"!category":"namespace","window":{"!description":"Receiving window object; has to be a different window than the window in which this client is used","!category":"enum","!type":"Object"},"Client":"sap.ui.rta.Client_obj"},"sap":{"sap":"sap","ui":"sap.ui","!category":"namespace"},"sap.ui.rta.Client_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.rta.Client with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.rta.Client"},"sap.ui.rta.enablement":{"TestDelegate":"sap.ui.rta.enablement.TestDelegate","!category":"namespace"},"sap.ui.rta.enablement.TestDelegate":{"!description":"sap.ui.fl Delegate to be used in elementActionTests.","!module":"sap/ui/rta/enablement/TestDelegate","!helpDescription":"sap.ui.fl Delegate to be used in elementActionTests.","!category":"namespace"},"sap.ui.rta.util.changeVisualization.ChangeIndicator":{"detachKeyPress":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:keyPress keyPress} event of this <code>sap.ui.rta.util.changeVisualization.ChangeIndicator<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.rta.util.changeVisualization.ChangeIndicator","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"!proto":"sap.ui.core.Control","setChanges":{"!description":"Sets a new value for property {@link #getChanges changes}.\n\nList of changes that should be rendered for the indicator\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>[]<\/code>.","!static":false,"!category":"function","!type":"fn(sChanges?: Array) -> sap.ui.rta.util.changeVisualization.ChangeIndicator","parameters":{"sChanges":"type: array, description: New value for property <code>changes<\/code>"}},"setPosX":{"!description":"Sets a new value for property {@link #getPosX posX}.\n\nDistance from the left side of the screen in px\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(iPosX: Number) -> sap.ui.rta.util.changeVisualization.ChangeIndicator","parameters":{"iPosX":"type: int, description: New value for property <code>posX<\/code>"}},"getSelectorId":{"!description":"Gets current value of property {@link #getSelectorId selectorId}.\n\nID of the selector that the indicator's changes belong to","!static":false,"!category":"function","!type":"fn() -> String"},"setPosY":{"!description":"Sets a new value for property {@link #getPosY posY}.\n\nDistance from the top of the screen in px\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(iPosY: Number) -> sap.ui.rta.util.changeVisualization.ChangeIndicator","parameters":{"iPosY":"type: int, description: New value for property <code>posY<\/code>"}},"!category":"class","detachSelectChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:selectChange selectChange} event of this <code>sap.ui.rta.util.changeVisualization.ChangeIndicator<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.rta.util.changeVisualization.ChangeIndicator","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getChanges changes} : array (default: [])<\/li>\n<li>{@link #getMode mode} : string (default: \"change\")<\/li>\n<li>{@link #getPosX posX} : int<\/li>\n<li>{@link #getPosY posY} : int<\/li>\n<li>{@link #getOverlayId overlayId} : string<\/li>\n<li>{@link #getSelectorId selectorId} : string<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:selectChange selectChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:keyPress keyPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","getChanges":{"!description":"Gets current value of property {@link #getChanges changes}.\n\nList of changes that should be rendered for the indicator\n\nDefault value is <code>[]<\/code>.","!static":false,"!category":"function","!type":"fn() -> Array"},"fireKeyPress":{"!description":"Fires event {@link #event:keyPress keyPress} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.rta.util.changeVisualization.ChangeIndicator","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"getMode":{"!description":"Gets current value of property {@link #getMode mode}.\n\nMode of the indicator, \"change\" or \"dependent\"\n\nDefault value is <code>\"change\"<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"attachSelectChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:selectChange selectChange} event of this <code>sap.ui.rta.util.changeVisualization.ChangeIndicator<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.rta.util.changeVisualization.ChangeIndicator<\/code> itself.\n\nFired when the details for a change should be displayed","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.rta.util.changeVisualization.ChangeIndicator","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.rta.util.changeVisualization.ChangeIndicator<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"!description":"Constructor for a new <code>sap.ui.rta.util.changeVisualization.ChangeIndicator<\/code> class. The <code>ChangeIndicator<\/code> class is used to visualize the changes of an app.","setSelectorId":{"!description":"Sets a new value for property {@link #getSelectorId selectorId}.\n\nID of the selector that the indicator's changes belong to\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sSelectorId: String) -> sap.ui.rta.util.changeVisualization.ChangeIndicator","parameters":{"sSelectorId":"type: string, description: New value for property <code>selectorId<\/code>"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.rta.util.changeVisualization.ChangeIndicator.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"fireSelectChange":{"!description":"Fires event {@link #event:selectChange selectChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.rta.util.changeVisualization.ChangeIndicator","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"setMode":{"!description":"Sets a new value for property {@link #getMode mode}.\n\nMode of the indicator, \"change\" or \"dependent\"\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>\"change\"<\/code>.","!static":false,"!category":"function","!type":"fn(sMode?: String) -> sap.ui.rta.util.changeVisualization.ChangeIndicator","parameters":{"sMode":"type: string, description: New value for property <code>mode<\/code>"}},"attachKeyPress":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:keyPress keyPress} event of this <code>sap.ui.rta.util.changeVisualization.ChangeIndicator<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.rta.util.changeVisualization.ChangeIndicator<\/code> itself.\n\nFired when a key is pressed while the focus is on the indicator","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.rta.util.changeVisualization.ChangeIndicator","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.rta.util.changeVisualization.ChangeIndicator<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"extend":{"!description":"Creates a new subclass of class sap.ui.rta.util.changeVisualization.ChangeIndicator with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!module":"sap/ui/rta/util/changeVisualization/ChangeIndicator","getOverlayId":{"!description":"Gets current value of property {@link #getOverlayId overlayId}.\n\nID of the overlay that the indicator should be rendered in","!static":false,"!category":"function","!type":"fn() -> String"},"!helpDescription":"Constructor for a new <code>sap.ui.rta.util.changeVisualization.ChangeIndicator<\/code> class. The <code>ChangeIndicator<\/code> class is used to visualize the changes of an app.","setOverlayId":{"!description":"Sets a new value for property {@link #getOverlayId overlayId}.\n\nID of the overlay that the indicator should be rendered in\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sOverlayId: String) -> sap.ui.rta.util.changeVisualization.ChangeIndicator","parameters":{"sOverlayId":"type: string, description: New value for property <code>overlayId<\/code>"}},"getPosX":{"!description":"Gets current value of property {@link #getPosX posX}.\n\nDistance from the left side of the screen in px","!static":false,"!category":"function","!type":"fn() -> Number"},"getPosY":{"!description":"Gets current value of property {@link #getPosY posY}.\n\nDistance from the top of the screen in px","!static":false,"!category":"function","!type":"fn() -> Number"}},"sap.ui.rta.util.changeVisualization":{"rootControlId":{"!description":"Id of the component or control to visualize the changes for","!category":"enum","!type":"String"},"selectorId":{"!description":"ID of the selector that the indicator's changes belong to","!category":"enum","!type":"String"},"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"ChangeIndicatorRegistry":"sap.ui.rta.util.changeVisualization.ChangeIndicatorRegistry_obj","busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"ChangeVisualization":"sap.ui.rta.util.changeVisualization.ChangeVisualization_obj","changes":{"!description":"List of changes that should be rendered for the indicator","!category":"enum","!type":"Array"},"!category":"namespace","isActive":{"!description":"Whether changes are currently being displayed","!category":"enum","!type":"Boolean"},"mode":{"!description":"Mode of the indicator, \"change\" or \"dependent\"","!category":"enum","!type":"String"},"posX":{"!description":"Distance from the left side of the screen in px","!category":"enum","!type":"Number"},"posY":{"!description":"Distance from the top of the screen in px","!category":"enum","!type":"Number"},"commandCategories":{"!description":"Available command categories","!category":"enum","!type":"Object"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"ChangeIndicator":"sap.ui.rta.util.changeVisualization.ChangeIndicator_obj","overlayId":{"!description":"ID of the overlay that the indicator should be rendered in","!category":"enum","!type":"String"}},"sap.ui":{"!category":"namespace","rta":"sap.ui.rta"},"sap.ui.rta.util.changeVisualization.ChangeVisualization":{"!description":"Root control for RTA change visualization.","getPopover":{"!description":"Gets content of aggregation {@link #getPopover popover}.","!static":false,"!category":"function","!type":"fn() -> sap.m.Popover"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.rta.util.changeVisualization.ChangeVisualization.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"setPopover":{"!description":"Sets the aggregated {@link #getPopover popover}.","!static":false,"!category":"function","!type":"fn(oPopover: sap.m.Popover) -> sap.ui.rta.util.changeVisualization.ChangeVisualization","parameters":{"oPopover":"type: sap.m.Popover, description: The popover to set"}},"destroyPopover":{"!description":"Destroys the popover in the aggregation {@link #getPopover popover}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.rta.util.changeVisualization.ChangeVisualization"},"!proto":"sap.ui.core.Control","!category":"class","extend":{"!description":"Creates a new subclass of class sap.ui.rta.util.changeVisualization.ChangeVisualization with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getIsActive":{"!description":"Gets current value of property {@link #getIsActive isActive}.\n\nWhether changes are currently being displayed\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getRootControlId rootControlId} : string<\/li>\n<li>{@link #getIsActive isActive} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getPopover popover} : sap.m.Popover<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","!module":"sap/ui/rta/util/changeVisualization/ChangeVisualization","!helpDescription":"Root control for RTA change visualization.","getRootControlId":{"!description":"Gets current value of property {@link #getRootControlId rootControlId}.\n\nId of the component or control to visualize the changes for","!static":false,"!category":"function","!type":"fn() -> String"},"setRootControlId":{"!description":"Sets a new value for property {@link #getRootControlId rootControlId}.\n\nId of the component or control to visualize the changes for\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sRootControlId: String) -> sap.ui.rta.util.changeVisualization.ChangeVisualization","parameters":{"sRootControlId":"type: string, description: New value for property <code>rootControlId<\/code>"}},"setIsActive":{"!description":"Sets a new value for property {@link #getIsActive isActive}.\n\nWhether changes are currently being displayed\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bIsActive?: Boolean) -> sap.ui.rta.util.changeVisualization.ChangeVisualization","parameters":{"bIsActive":"type: boolean, description: New value for property <code>isActive<\/code>"}}},"sap.ui.rta.service.Action":{"!description":"Provides necessary functionality to get and execute actions on controls. Actions are UI operations available in key user adaptation such as rename, remove, move etc.","!module":"sap/ui/rta/service/Action","!helpDescription":"Provides necessary functionality to get and execute actions on controls. Actions are UI operations available in key user adaptation such as rename, remove, move etc.","get":{"!description":"Returns a list of available actions for the specified control(s) wrapped in a promise.\n\nExample:\n\n<pre>\n[\n    {\n        \"id\": \"CTX_RENAME\",\n        \"text\": \"Rename\",\n        \"enabled\": false,\n        \"rank\": 10,\n        \"icon\": \"sap-icon://edit\"\n    },\n    {\n        \"id\": \"CTX_ADD_ELEMENTS_AS_SIBLING\",\n        \"text\": \"Add Field\",\n        \"enabled\": false,\n        \"rank\": 20,\n        \"icon\": \"sap-icon://add\",\n        \"group\": \"Add\"\n    },\n    {\n        \"id\": \"CTX_REMOVE\",\n        \"text\": \"Remove\",\n        \"enabled\": true,\n        \"rank\": 60,\n        \"icon\": \"sap-icon://decline\"\n    },\n    {\n        \"id\": \"CTX_CUT\",\n        \"text\": \"Cut\",\n        \"enabled\": false,\n        \"rank\": 70,\n        \"icon\": \"sap-icon://scissors\"\n    },\n    {\n        \"id\": \"CTX_PASTE\",\n        \"text\": \"Paste\",\n        \"enabled\": false,\n        \"rank\": 80,\n        \"icon\": \"sap-icon://paste\"\n    }\n]\n<\/pre>","!static":"true","!category":"function","!type":"fn(vControlIds: [String | String]) -> [Promise<sap.ui.rta.service.Action.ActionObject]"},"!category":"namespace","execute":{"!description":"Returns a list of available actions for the specified control(s).","!static":"true","!category":"function","!type":"fn(vControlIds: [String | String], sActionId: String) -> Promise<any>"}},"sap.ui.rta.service":{"Action":"sap.ui.rta.service.Action","Selection":"sap.ui.rta.service.Selection","ControllerExtension":"sap.ui.rta.service.ControllerExtension","Outline":"sap.ui.rta.service.Outline","!category":"namespace","Property":"sap.ui.rta.service.Property"},"sap.ui.rta.Client":{"!description":"<h3>Overview<\/h3> This client is used to access the <code>sap.ui.RuntimeAuthoring<\/code> instance that is running in a separate window.\n\n<h4>Example:<\/h4> <pre>\nsap.ui.require(['sap/ui/rta/Client'], function (RTAClient) {\n    var oRTAClient = new RTAClient({\n        window: <Receiving window>,\n        origin: <Origin of receiving window>\n    });\n\n    oRTAClient.getService('selection').then(function (oSelectionService) {\n        oSelectionService.add('__button0').then(\n            function (vResult) {\n                // vResult contains response from add() function of sap.ui.rta.service.Selection\n            },\n            function (vError) {\n                // Error that happens during the operation\n            }\n        );\n    });\n});\n<\/pre>","getMetadata":{"!description":"Returns a metadata object for class sap.ui.rta.Client.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getOrigin":{"!description":"Gets current value of property {@link #getOrigin origin}.\n\nReceiving window origin; a valid origin has to be specified, see {@link https://html.spec.whatwg.org/multipage/origin.html#origin}","!static":false,"!category":"function","!type":"fn() -> String"},"getWindow":{"!description":"Gets current value of property {@link #getWindow window}.\n\nReceiving window object; has to be a different window than the window in which this client is used","!static":false,"!category":"function","!type":"fn() -> Object"},"setOrigin":{"!description":"Sets a new value for property {@link #getOrigin origin}.\n\nReceiving window origin; a valid origin has to be specified, see {@link https://html.spec.whatwg.org/multipage/origin.html#origin}\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sOrigin: String) -> sap.ui.rta.Client","parameters":{"sOrigin":"type: string, description: New value for property <code>origin<\/code>"}},"!proto":"sap.ui.base.ManagedObject","destroy":{"!description":"Destroys the client. After an object has been destroyed, it can no longer be used.","!static":false,"!category":"function","!type":"fn()"},"!category":"class","setWindow":{"!description":"Sets a new value for property {@link #getWindow window}.\n\nReceiving window object; has to be a different window than the window in which this client is used\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oWindow: Object) -> sap.ui.rta.Client","parameters":{"oWindow":"type: object, description: New value for property <code>window<\/code>"}},"extend":{"!description":"Creates a new subclass of class sap.ui.rta.Client with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getWindow window} : object<\/li>\n<li>{@link #getOrigin origin} : string<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}\ncan be used as well.","!module":"sap/ui/rta/Client","!helpDescription":"<h3>Overview<\/h3> This client is used to access the <code>sap.ui.RuntimeAuthoring<\/code> instance that is running in a separate window.\n\n<h4>Example:<\/h4> <pre>\nsap.ui.require(['sap/ui/rta/Client'], function (RTAClient) {\n    var oRTAClient = new RTAClient({\n        window: <Receiving window>,\n        origin: <Origin of receiving window>\n    });\n\n    oRTAClient.getService('selection').then(function (oSelectionService) {\n        oSelectionService.add('__button0').then(\n            function (vResult) {\n                // vResult contains response from add() function of sap.ui.rta.service.Selection\n            },\n            function (vError) {\n                // Error that happens during the operation\n            }\n        );\n    });\n});\n<\/pre>"},"sap.ui.rta.service.Outline":{"!description":"Provides necessary functionality to get tree model data for an outline. Takes into consideration different design time root elements.","!module":"sap/ui/rta/service/Outline","!helpDescription":"Provides necessary functionality to get tree model data for an outline. Takes into consideration different design time root elements.","get":{"!description":"Returns an outline model data associated with the key user adaptation instance, starting from the passed control. If no control is passed, the root control(s) of the respective key user adaptation instance is taken as the initial control. Throws an error if the control ID parameter is not a valid control with a stable ID.","!static":"true","!category":"function","!type":"fn(vControlIds: [String | String], sId: String, iDepth?: Number) -> sap.ui.rta.service.Outline.OutlineObject"},"!category":"namespace"},"sap.ui.rta.service.Property":{"!description":"Provides necessary functionality to retrieve design time metadata properties. Takes into consideration control metadata properties, design time metadata properties, annotations, label and name.","!module":"sap/ui/rta/service/Property","!helpDescription":"Provides necessary functionality to retrieve design time metadata properties. Takes into consideration control metadata properties, design time metadata properties, annotations, label and name.","get":{"!description":"Returns an object containing design time properties for the passed control's ID. Throws an error if the control ID parameter is not a valid control with a stable ID.\n\nExample:\n\n<pre>\n\t{\n\t\t\"properties\": {\n\t\t\t<...>,\n\t\t\t\"virtualProperty1\": {\n\t\t\t\t<...>\n\t\t\t},\n\t\t\t\"metadataProperty1\": {\n\t\t\t\t<...>\n\t\t\t}\n\t\t},\n\t\t\"annotations\": {\n\t\t\t\"annotation1\": {\n\t\t\t\t<...>\n\t\t\t},\n\t\t\t<...>\n\t\t},\n\t\t\"links\": {\n\t\t\t<...>\n\t\t},\n\t\t<...>\n\t}\n<\/pre>","!static":"true","!category":"function","!type":"fn(vControlIds: [String | String], sId: String, iDepth?: Number, sControlId: String) -> sap.ui.rta.service.Property.PropertyObject"},"!category":"namespace"},"sap.ui.rta.util.changeVisualization.ChangeIndicatorRegistry_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.rta.util.changeVisualization.ChangeIndicatorRegistry with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.rta.util.changeVisualization.ChangeIndicatorRegistry"},"sap.ui.rta.util.changeVisualization.ChangeIndicator_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.rta.util.changeVisualization.ChangeIndicator with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.rta.util.changeVisualization.ChangeIndicator"},"sap.ui.rta.service.ControllerExtension":{"!description":"Provides functionality to create <code>ControllerExtensions<\/code>.","add":{"!description":"Creates a change that adds an extension to the controller associated with the given view. Throws an error if the information is not complete. As of now, this only creates the change with a reference to a file. The consumer has to take care of creating that file and adding it to the backend.","!static":"true","!category":"function","!type":"fn(sCodeRef: String, sViewId: String) -> Object"},"!module":"sap/ui/rta/service/ControllerExtension","!helpDescription":"Provides functionality to create <code>ControllerExtensions<\/code>.","getTemplate":{"!description":"Gets the controller extension template from the <code>DesignTimeMetadata<\/code> of the given view and returns it as a string wrapped in a promise. If there is no template specified, a default template will be returned.","!static":"true","!category":"function","!type":"fn(sViewId: String) -> Promise"},"!category":"namespace"},"sap.ui.rta.service.Selection":{"!description":"Provides functionality to get and set selection on controls.","add":{"!description":"Adds the specified controls to the current selection.","!static":"true","!category":"function","!type":"fn(sCodeRef: String, sViewId: String, vControlIds: [String | String]) -> Boolean"},"set":{"!description":"Deselects the current selection and selects the specified list of controls.","!static":"true","!category":"function","!type":"fn(vControlIds: [String | String]) -> Boolean"},"!module":"sap/ui/rta/service/Selection","!helpDescription":"Provides functionality to get and set selection on controls.","get":{"!description":"Gets list of currently selected controls.","!static":"true","!category":"function","!type":"fn(vControlIds: [String | String], sId: String, iDepth?: Number, sControlId: String) -> [String]"},"reset":{"!description":"Resets the current selection.","!static":"true","!category":"function","!type":"fn() -> Boolean"},"!category":"namespace","remove":{"!description":"Removes the selection from the specified controls.","!static":"true","!category":"function","!type":"fn(vControlIds: [String | String]) -> Boolean"}},"sap.ui.rta.util":{"changeVisualization":"sap.ui.rta.util.changeVisualization","!category":"namespace"},"sap.ui.rta.util.changeVisualization.ChangeVisualization_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.rta.util.changeVisualization.ChangeVisualization with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.rta.util.changeVisualization.ChangeVisualization"},"sap.ui.rta.util.changeVisualization.ChangeIndicatorRegistry":{"!description":"Registry for <code>sap.ui.rta.util.changeVisualization.ChangeIndicator<\/code> instances.","extend":{"!description":"Creates a new subclass of class sap.ui.rta.util.changeVisualization.ChangeIndicatorRegistry with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.rta.util.changeVisualization.ChangeIndicatorRegistry.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getCommandCategories commandCategories} : object (default: [])<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}\ncan be used as well.","!module":"sap/ui/rta/util/changeVisualization/ChangeIndicatorRegistry","!helpDescription":"Registry for <code>sap.ui.rta.util.changeVisualization.ChangeIndicator<\/code> instances.","!proto":"sap.ui.base.ManagedObject","getCommandCategories":{"!description":"Gets current value of property {@link #getCommandCategories commandCategories}.\n\nAvailable command categories\n\nDefault value is <code>[]<\/code>.","!static":false,"!category":"function","!type":"fn() -> Object"},"!category":"class","setCommandCategories":{"!description":"Sets a new value for property {@link #getCommandCategories commandCategories}.\n\nAvailable command categories\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>[]<\/code>.","!static":false,"!category":"function","!type":"fn(oCommandCategories?: Object) -> sap.ui.rta.util.changeVisualization.ChangeIndicatorRegistry","parameters":{"oCommandCategories":"type: object, description: New value for property <code>commandCategories<\/code>"}}}}}