<?xml version="1.0" encoding="utf-8"?>
<edmx:Edmx Version="4.0" xmlns:edmx="http://docs.oasis-open.org/odata/ns/edmx">
  <edmx:Reference Uri="http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/vocabularies/Org.OData.Core.V1.xml">
    <edmx:Include Namespace="Org.OData.Core.V1" Alias="Core" />
  </edmx:Reference>
  <edmx:Reference Uri="/coco/vocabularies/Communication.xml">
    <edmx:Include Namespace="com.sap.vocabularies.Communication.v1" Alias="vCard" />
  </edmx:Reference>
  <edmx:Reference Uri="/coco/vocabularies/Common.xml">
    <edmx:Include Namespace="com.sap.vocabularies.Common.v1" Alias="Common" />
  </edmx:Reference>
  <edmx:DataServices>
    <Schema xmlns="http://docs.oasis-open.org/odata/ns/edm" Alias="UI" Namespace="com.sap.vocabularies.UI.v1">
      <Annotation Term="Core.Description">
        <String>Terms for presenting data in user interfaces</String>
      </Annotation>
      <Annotation Term="Core.Description" Qualifier="Published">
        <String>2015-04-24 Â© Copyright 2015 SAP SE. All rights reserved</String>
      </Annotation>

      <!-- Semantic Views / Perspectives -->

      <Term Name="HeaderInfo" Type="UI.HeaderInfoType" AppliesTo="EntityType">
        <Annotation Term="UI.ThingPerspective" />
        <Annotation Term="Core.Description">
          <String>HeaderInfos are mandatory and must be exposed on every thing of the model</String>
        </Annotation>
      </Term>
      <ComplexType Name="HeaderInfoType">
        <Property Name="TypeName" Type="Edm.String" Nullable="false">
          <Annotation Term="Core.IsLanguageDependent" />
        </Property>
        <Property Name="TypeNamePlural" Type="Edm.String" Nullable="false">
          <Annotation Term="Core.IsLanguageDependent" />
        </Property>
        <Property Name="TypeImageUrl" Type="Edm.String" Nullable="true">
          <Annotation Term="Core.IsURL" />
        </Property>
        <!-- TODO: have UX specify how to deal with data fields that point to a code property with corresponding text property -->
        <Property Name="Title" Type="UI.DataField" Nullable="false" />
        <Property Name="Description" Type="UI.DataField" Nullable="true" />
        <Property Name="ImageUrl" Type="Edm.String" Nullable="true">
          <Annotation Term="Core.IsURL" />
        </Property>
      </ComplexType>

      <Term Name="Identification" Type="Collection(UI.DataFieldAbstract)" Nullable="false" AppliesTo="EntityType">
        <Annotation Term="UI.ThingPerspective" />
        <Annotation Term="Core.Description">
          <String>HeaderInfo plus this set of attributes identifies the object</String>
        </Annotation>
      </Term>

      <Term Name="Badge" Type="UI.BadgeType" AppliesTo="EntityType">
        <Annotation Term="UI.ThingPerspective" />
        <Annotation Term="Core.Description">
          <String>Badge is similar to a business card view</String>
        </Annotation>
      </Term>
      <ComplexType Name="BadgeType">
        <Property Name="HeadLine" Type="UI.DataField" Nullable="false" />
        <Property Name="Title" Type="UI.DataField" Nullable="false" />
        <Property Name="ImageUrl" Type="Edm.String" Nullable="true">
          <Annotation Term="Core.IsURL" />
        </Property>
        <Property Name="TypeImageUrl" Type="Edm.String" Nullable="true">
          <Annotation Term="Core.IsURL" />
        </Property>
        <Property Name="MainInfo" Type="UI.DataField" Nullable="true" />
        <Property Name="SecondaryInfo" Type="UI.DataField" Nullable="true" />
      </ComplexType>

      <Term Name="LineItem" Type="Collection(UI.DataFieldAbstract)" Nullable="false" AppliesTo="EntityType">
        <Annotation Term="Core.Description" String="Set of data fields for representation in a table or list" />
        <Annotation Term="UI.ThingPerspective" />
      </Term>

      <Term Name="StatusInfo" Type="Collection(UI.DataFieldAbstract)" Nullable="false" AppliesTo="EntityType">
        <Annotation Term="UI.ThingPerspective" />
      </Term>

      <Term Name="FieldGroup" Type="UI.FieldGroupType" AppliesTo="EntityType Action Function FunctionImport">
        <Annotation Term="Core.Description" String="A group of fields with an optional label" />
        <Annotation Term="UI.ThingPerspective" />
      </Term>
      <ComplexType Name="FieldGroupType">
        <Property Name="Label" Type="Edm.String" Nullable="true">
          <Annotation Term="Core.IsLanguageDependent" />
        </Property>
        <Property Name="Data" Type="Collection(UI.DataFieldAbstract)" Nullable="false" />
      </ComplexType>

      <!-- To be discussed, please don't deliver -->
      <Term Name="GeoPoints" Type="Collection(Edm.AnnotationPath)" Nullable="false" AppliesTo="EntityType">
        <Annotation Term="Core.Description">
          <String>
            Each collection element MUST reference an annotation of a  
            - vCard.Contact or 
            - collection of vCard.ContactData or
            - UI.Contacts or
            - UI.GeoLocation or
            - collection of UI.GeoLocationType
          </String>
        </Annotation>
        <Annotation Term="UI.ThingPerspective" />
      </Term>
      <!-- To be discussed, please don't deliver -->

      <Term Name="GeoLocations" Type="Collection(UI.GeoLocationType)" Nullable="false" AppliesTo="EntityType">
        <Annotation Term="UI.ThingPerspective" />
      </Term>
      <Term Name="GeoLocation" Type="UI.GeoLocationType" AppliesTo="EntityType">
        <Annotation Term="UI.ThingPerspective" />
      </Term>
      <ComplexType Name="GeoLocationType">
        <Annotation Term="Core.Description">
          <String>Set of Attributes which defines the Localization of the object</String>
        </Annotation>
        <Property Name="Latitude" Type="Edm.Double" Nullable="true" />
        <Property Name="Longitude" Type="Edm.Double" Nullable="true" />
        <Property Name="Location" Type="Edm.GeographyPoint" Nullable="true" />
        <Property Name="Address" Type="vCard.AddressType" Nullable="true" />
      </ComplexType>

      <Term Name="Contacts" Type="Collection(Edm.AnnotationPath)" Nullable="false" AppliesTo="EntityType">
        <Annotation Term="Core.Description" String="Each collection element MUST reference an annotation of a vCard.Contact" />
        <Annotation Term="UI.ThingPerspective" />
      </Term>

      <!-- To be discussed, please don't deliver -->
      <Term Name="MediaResource" Type="UI.MediaResourceType" AppliesTo="EntityType">
        <Annotation Term="UI.ThingPerspective" />
        <Annotation Term="Core.Description" String="Properties that are relevant for Media Resources" />
      </Term>
      <ComplexType Name="MediaResourceType">
        <Property Name="Url" Type="Edm.String" Nullable="false">
          <Annotation Term="Core.IsURL" />
        </Property>
        <Property Name="ContentType" Type="Edm.String" Nullable="true">
          <Annotation Term="Core.IsMediaType" />
        </Property>
        <Property Name="ByteSize" Type="Edm.Int64" Nullable="true" />
        <Property Name="ChangedAt" Type="Edm.DateTimeOffset" Nullable="true" />
        <Property Name="Thumbnail" Type="UI.ImageType" Nullable="true" />
        <Property Name="Title" Type="UI.DataField" Nullable="false" />
        <Property Name="Description" Type="UI.DataField" Nullable="true" />
      </ComplexType>
      <ComplexType Name="ImageType">
        <Property Name="Url" Type="Edm.String" Nullable="false">
          <Annotation Term="Core.IsURL" />
        </Property>
        <Property Name="Width" Type="Edm.String" Nullable="true" />
        <Property Name="Height" Type="Edm.String" Nullable="true" />
      </ComplexType>
      <!-- To be discussed, please don't deliver -->

      <!-- To be discussed, please don't deliver -->
      <Term Name="AdditionalInfo" Type="Edm.AnnotationPath" AppliesTo="Annotation">
        <Annotation Term="Core.Description">
          <String>
            Applies to UI.GeoLocation and vCard.Contact annotations only
            Provides additional related information for a UI.GeoLocation or vCard.Contact 
            Reference to UI.HeaderInfo, UI.Badge, a qualified UI.FieldGroup, or a dedicated property tagged with Core.IsUrl
          </String>
        </Annotation>
      </Term>
      <!-- To be discussed, please don't deliver -->

      <Term Name="DataPoint" Type="UI.DataPointType" AppliesTo="EntityType">
        <Annotation Term="UI.ThingPerspective" />
      </Term>
      <ComplexType Name="DataPointType">
        <Property Name="Title" Type="Edm.String" Nullable="false">
          <Annotation Term="Core.IsLanguageDependent" />
        </Property>
        <Property Name="Description" Type="Edm.String" Nullable="true">
          <Annotation Term="Core.IsLanguageDependent" />
        </Property>
        <Property Name="LongDescription" Type="Edm.String" Nullable="true">
          <Annotation Term="Core.IsLanguageDependent" />
        </Property>
        <Property Name="Value" Type="Edm.PrimitiveType" Nullable="false">
          <Annotation Term="Core.Description" String="The numeric value of the DataPoint" />
          <Annotation Term="Core.LongDescription">
            <String>
              It could be annotated with either UoM.ISOCurrency or UoM.Unit.
              Percentage values are annotated with UoM.Unit = '%'.
              A renderer should take an optional Common.Text annotation into consideration.
            </String>
          </Annotation>
        </Property>
        <Property Name="TargetValue" Type="Edm.PrimitiveType" Nullable="true">
          <Annotation Term="Core.Description" String="The target value of the DataPoint" />
        </Property>
        <Property Name="ValueFormat" Type="UI.NumberFormat" Nullable="true" />
        <Property Name="ReferencePeriod" Type="UI.ReferencePeriod" Nullable="true" />
        <Property Name="Criticality" Type="UI.CriticalityType" Nullable="true" />
        <Property Name="CriticalityCalculation" Type="UI.CriticalityCalculationType" Nullable="true" />
        <Property Name="Trend" Type="UI.TrendType" Nullable="true" />
        <Property Name="TrendCalculation" Type="UI.TrendCalculationType" Nullable="true" />
        <Property Name="Responsible" Type="vCard.ContactType" Nullable="true" />
      </ComplexType>

      <ComplexType Name="NumberFormat">
        <Property Name="ScaleFactor" Type="Edm.Decimal" Scale="variable" Nullable="true" />
        <Property Name="NumberOfFractionalDigits" Type="Edm.Byte" Nullable="true" />
      </ComplexType>

      <ComplexType Name="ReferencePeriod">
        <Property Name="Description" Type="Edm.String" Nullable="true">
          <Annotation Term="Core.IsLanguageDependent" />
        </Property>
        <Property Name="Start" Type="Edm.DateTimeOffset" Nullable="true" />
        <Property Name="End" Type="Edm.DateTimeOffset" Nullable="true" />
      </ComplexType>

      <EnumType Name="CriticalityType">
        <Member Name="Negative" Value="1" />
        <Member Name="Critical" Value="2" />
        <Member Name="Positive" Value="3" />
      </EnumType>

      <ComplexType Name="CriticalityCalculationType">
        <Annotation Term="Core.Description">
          <String>
            Direction: Target        
             - Positive: ge ToleranceRangeLowValue  and le ToleranceRangeHighValue
             - Critical: ge DeviationRangeLowValue  and lt ToleranceRangeLowValue or
                         gt ToleranceRangeHighValue and le DeviationRangeHighValue
             - Negative: lt DeviationRangeLowValue  and gt DeviationRangeHighValue
            Direction: Minimize        
             - Positive: le ToleranceRangeHighValue
             - Critical: gt ToleranceRangeHighValue and le DeviationRangeHighValue  
             - Negative: gt DeviationRangeHighValue
            Direction: Maximize        
             - Positive: ge ToleranceRangeLowValue  
             - Critical: lt ToleranceRangeLowValue and ge DeviationRangeLowValue   
             - Negative: lt DeviationRangeLowValue    
          </String>
        </Annotation>
        <Property Name="ImprovementDirection" Type="UI.ImprovementDirectionType" Nullable="false" />
        <Property Name="ToleranceRangeLowValue" Type="Edm.PrimitiveType" Nullable="true" />
        <Property Name="ToleranceRangeHighValue" Type="Edm.PrimitiveType" Nullable="true" />
        <Property Name="DeviationRangeLowValue" Type="Edm.PrimitiveType" Nullable="true" />
        <Property Name="DeviationRangeHighValue" Type="Edm.PrimitiveType" Nullable="true" />
      </ComplexType>

      <EnumType Name="ImprovementDirectionType">
        <Member Name="Minimize" Value="1" />
        <Member Name="Target" Value="2" />
        <Member Name="Maximize" Value="3" />
      </EnumType>

      <EnumType Name="TrendType">
        <Member Name="StrongUp" Value="1" />
        <Member Name="Up" Value="2" />
        <Member Name="Sideways" Value="3" />
        <Member Name="Down" Value="4" />
        <Member Name="StrongDown" Value="5" />
      </EnumType>

      <ComplexType Name="TrendCalculationType">
        <Annotation Term="Core.Description">
          <String>
            Value sub ReferenceValue ( div ReferenceValue if IsRelativeDifference ) must be
             - StrongUp:   ge StrongUpDifference
             - Up:         lt StrongUpDifference   and ge UpDifference
             - Sideways:   lt UpDifference         and gt DownDifference
             - Down:       gt StrongDownDifference and le DownDifference
             - StrongDown: le StrongDownDifference
          </String>
        </Annotation>
        <Property Name="ReferenceValue" Type="Edm.PrimitiveType" Nullable="false" />
        <Property Name="IsRelativeDifference" Type="Edm.Boolean" DefaultValue="false" />
        <Property Name="UpDifference" Type="Edm.Decimal" Nullable="false" />
        <Property Name="StrongUpDifference" Type="Edm.Decimal" Nullable="false" />
        <Property Name="DownDifference" Type="Edm.Decimal" Nullable="false" />
        <Property Name="StrongDownDifference" Type="Edm.Decimal" Nullable="false" />
      </ComplexType>

      <Term Name="Chart" Type="UI.ChartDefinitionType" AppliesTo="EntityType">
        <Annotation Term="UI.ThingPerspective" />
      </Term>
      <ComplexType Name="ChartDefinitionType">
        <Property Name="Title" Type="Edm.String" Nullable="true">
          <Annotation Term="Core.IsLanguageDependent" />
        </Property>
        <Property Name="Description" Type="Edm.String" Nullable="true">
          <Annotation Term="Core.IsLanguageDependent" />
        </Property>
        <Property Name="ChartType" Type="UI.ChartType" Nullable="false" />
        <Property Name="Measures" Type="Collection(Edm.PropertyPath)" Nullable="false" />
        <Property Name="MeasureAttributes" Type="Collection(UI.ChartMeasureAttributeType)" Nullable="false" />
        <Annotation Term="Core.Description">
          <String> Describes Attributes for Measures. 
                   All Measures used in this collection must also be part of the Measures Property.
          </String>
        </Annotation>
        <Property Name="Dimensions" Type="Collection(Edm.PropertyPath)" Nullable="false" />
        <Property Name="DimensionAttributes" Type="Collection(UI.ChartDimensionAttributeType)" Nullable="false" />
        <Annotation Term="Core.Description">
          <String> Describes Attributes for Dimensions. 
                   All Dimensions used in this collection must also be part of the Dimensions Property.
          </String>
        </Annotation>
      </ComplexType>

      <EnumType Name="ChartType">
        <Member Name="Column" />
        <Member Name="ColumnStacked" />
        <Member Name="ColumnDual" />
        <Member Name="ColumnStackedDual" />
        <Member Name="ColumnStacked100" />
        <Member Name="ColumnStackedDual100" />
        <Member Name="Bar" />
        <Member Name="BarStacked" />
        <Member Name="BarDual" />
        <Member Name="BarStackedDual" />
        <Member Name="BarStacked100" />
        <Member Name="BarStackedDual100" />
        <Member Name="Area" />
        <Member Name="AreaStacked" />
        <Member Name="AreaStacked100" />
        <Member Name="HorizontalArea" />
        <Member Name="HorizontalAreaStacked" />
        <Member Name="HorizontalAreaStacked100" />
        <Member Name="Line" />
        <Member Name="LineDual" />
        <Member Name="Combination" />
        <Member Name="CombinationStacked" />
        <Member Name="CombinationDual" />
        <Member Name="CombinationStackedDual" />
        <Member Name="HorizontalCombinationStacked" />
        <Member Name="Pie" />
        <Member Name="Donut" />
        <Member Name="Scatter" />
        <Member Name="Bubble" />
        <Member Name="Radar" />
        <Member Name="HeatMap" />
        <Member Name="TreeMap" />
        <Member Name="Waterfall" />
        <Member Name="Bullet" />
        <Member Name="VerticalBullet" />
        <!-- Future: GeoPie, GeoBubble, ChoroplethMap -->
      </EnumType>


      <ComplexType Name="ChartDimensionAttributeType">
        <Property Name="Dimension" Type="Edm.PropertyPath" />
        <Property Name="Role" Type="UI.ChartDimensionRoleType" />
      </ComplexType>

      <ComplexType Name="ChartMeasureAttributeType">
        <Property Name="Measure" Type="Edm.PropertyPath" />
        <Property Name="Role" Type="UI.ChartMeasureRoleType" />
      </ComplexType>

      <EnumType Name="ChartDimensionRoleType">
        <Member Name="Category" />
        <Member Name="Series" />
      </EnumType>

      <EnumType Name="ChartMeasureRoleType">
        <Member Name="Axis1" />
        <Member Name="Axis2" />
        <Member Name="Axis3" />
      </EnumType>

      <Term Name="SelectionFields" Type="Collection(Edm.PropertyPath)" Nullable="false" AppliesTo="EntityType">
        <Annotation Term="UI.ThingPerspective" />
        <Annotation Term="Core.Description"   
          String="Properties that might be relevant for filtering a collection of entities of this type" />
      </Term>

      <!-- Segmentation of content according to facets of the Object -->

      <Term Name="Facets" Type="Collection(UI.Facet)" Nullable="false" AppliesTo="EntityType">
      </Term>

      <Term Name="HeaderFacets" Type="Collection(UI.Facet)" AppliesTo="EntityType">
        <Annotation Term="Core.Description" String="Definition of structure for additional object header information" />
      </Term>

      <ComplexType Name="Facet" Abstract="true">
        <Annotation Term="Core.Description" String="Base type for facets" />
        <Property Name="Label" Type="Edm.String" Nullable="true">
          <Annotation Term="Core.IsLanguageDependent" />
        </Property>
        <Property Name="ID" Type="Edm.String" Nullable="true">
          <Annotation Term="Core.Description">
            <String>Identifier of a facet. ID should be stable, as long as the perceived semantics of the facet is unchanged.</String>
          </Annotation> 
        </Property>
      </ComplexType>
      <ComplexType Name="CollectionFacet" BaseType="UI.Facet">
        <Annotation Term="Core.Description" String="Collection of Facets" />
        <Property Name="Facets" Type="Collection(UI.Facet)" Nullable="false" />
      </ComplexType>
      <ComplexType Name="ReferenceFacet" BaseType="UI.Facet">
        <Annotation Term="Core.Description" String="Facet that refers to a thing perspective, e.g. LineItem" />
        <Property Name="Target" Type="Edm.AnnotationPath" Nullable="false">
          <Annotation Term="Core.Description">
            <String>Path MUST end in vCard.Contact or vCard.Address or a term that is tagged with UI.ThingPerspective, e.g.  UI.StatusInfo, UI.LineItem, UI.Identification, UI.FieldGroup, UI.Badge</String>
          </Annotation>
        </Property>
      </ComplexType>
      <ComplexType Name="ReferenceURLFacet" BaseType="UI.Facet">
        <Property Name="Url" Type="Edm.String" Nullable="false">
          <Annotation Term="Core.IsURL" />
        </Property>
        <Property Name="UrlContentType" Type="Edm.String" Nullable="true">
          <Annotation Term="Core.IsMediaType" />
        </Property>
      </ComplexType>


      <!-- Selection Variant and Presentation Variant -->
      <Term Name="SelectionPresentationVariant" Type="UI.SelectionPresentationVariantType" AppliesTo="EntitySet EntityType">
        <Annotation Term="UI.ThingPerspective" />
        <Annotation Term="Core.Description">
          <String>A SelectionPresentationVariant bundles a Selection Variant and a Presentation Variant</String>
        </Annotation>
      </Term>

      <ComplexType Name="SelectionPresentationVariantType">
        <Property Name="ID" Type="Edm.String">
          <Annotation Term="Core.Description">
            <String>May contain an identifier to reference this instance from an external context</String>
          </Annotation>
        </Property>
        <Property Name="Text" Type="Edm.String">
          <Annotation Term="Core.IsLanguageDependent" />
          <Annotation Term="Core.Description" String="Name of the bundling variant" />
        </Property>
        <Property Name="SelectionVariant" Type="UI.SelectionVariantType" Nullable="false">
          <Annotation Term="Core.Description"
            String="Could reference an UI.SelectionVariant Annotation via Path, syntax identical to AnnotationPath" />
        </Property>
        <Property Name="PresentationVariant" Type="UI.PresentationVariantType" Nullable="false">
          <Annotation Term="Core.Description"
            String="Could reference an UI.SelectionVariant Annotation via Path, syntax identical to AnnotationPath" />
        </Property>
      </ComplexType>

      <Term Name="PresentationVariant" Type="UI.PresentationVariantType" AppliesTo="EntitySet EntityType">
        <Annotation Term="Core.Description">
          <String>Defines how the result of a queried collection of entities is shaped and how this result is displayed</String>
        </Annotation>
      </Term>
      <ComplexType Name="PresentationVariantType">
        <Property Name="ID" Type="Edm.String">
          <Annotation Term="Core.Description" String="May contain an identifier to reference this instance from an external context" />
        </Property>
        <Property Name="Text" Type="Edm.String">
          <Annotation Term="Core.IsLanguageDependent" />
          <Annotation Term="Core.Description" String="Name of the presentation variant" />
        </Property>
        <Property Name="MaxItems" Type="Edm.Int32">
          <Annotation Term="Core.Description" String="Maximum number of items that should be included in the result" />
        </Property>
        <Property Name="SortOrder" Type="Collection(Common.SortOrderType)" Nullable="false">
          <Annotation Term="Core.Description"
            String="Collection could be provided inline or a reference to an Common.SortOrder Annotation via Path could be specified (syntax is identical to AnnotationPath)" />
        </Property>
        <Property Name="GroupBy" Type="Collection(Edm.PropertyPath)" Nullable="false">
          <Annotation Term="Core.Description">
            <String>Sequence of groupable properties p1, p2, ... defining how the result is composed of instances representing groups, 
            one for each combination of value properties in the queried collection. The sequence specifies a certain level
            of aggregation for the queried collection, and every group instance will provide aggregated values for
            properties that are aggregatable. Moreover, the series of sub-sequences (p1), (p1, p2), ... forms a leveled hierarchy,
            which may become relevant in combination with InitialExpansionLevel.</String>
          </Annotation>
        </Property>
        <Property Name="TotalBy" Type="Collection(Edm.PropertyPath)" Nullable="false">
          <Annotation Term="Core.Description">
            <String>Sub-sequence q1, q2, ... of properties p1, p2, ... specified in GroupBy. With this, additional levels of aggregation 
            are requested in addition to the most granular level defined by GroupBy: Every element in the series of sub-sequences 
            (q1), (q1, q2), ... introduces an additional aggregation level included in the result.</String>
          </Annotation>
        </Property>
        <Property Name="Total" Type="Collection(Edm.PropertyPath)" Nullable="false">
          <Annotation Term="Core.Description">
            <String>Aggregatable properties for which aggregated values should be provided for the additional aggregation levels specified in TotalBy.</String>
          </Annotation>
        </Property>
        <Property Name="IncludeGrandTotal" Type="Edm.Boolean">
          <Annotation Term="Core.Description" String="Result should include a grand total for the properties specified in Total" />
        </Property>
        <Property Name="InitialExpansionLevel" Type="Edm.Int" DefaultValue="1">
          <Annotation Term="Core.Description">
            <String>Initial number of levels to expand in a hierarchy defined for the queried collection.
            The hierarchy may be implicitly imposed by the sequence of the GroupBy, or by an explicit hierarchy annotation.</String>
          </Annotation>
        </Property>
        <Property Name="Visualizations" Type="Collection(Edm.AnnotationPath)" Nullable="false">
          <Annotation Term="Core.Description">
            <String>Allowed references of AnnotationPath are Annotations of UI.Lineitem, and UI.Chart
                    A reference to UI.Lineitem should always be part of collection (least common denominator for renderers)
                   The first entry of the collection is the default visualization</String>
          </Annotation>
        </Property>
        <Property Name="RequestAtLeast" Type="Collection(Edm.PropertyPath)" Nullable="false">
          <Annotation Term="Core.Description"
            String="Properties that should always be included in the result of the queried collection" />
        </Property>
      </ComplexType>

      <!-- Selection Variants -->
      <Term Name="SelectionVariant" Type="UI.SelectionVariantType" AppliesTo="EntitySet EntityType">
        <Annotation Term="Core.Description">
          <String>A SelectionVariant denotes a combination of parameters and filters to query the annotated entity set</String>
        </Annotation>
      </Term>

      <ComplexType Name="SelectionVariantType">
        <Property Name="ID" Type="Edm.String" Nullable="true">
          <Annotation Term="Core.Description">
            <String> May contain identifier to reference this instance from an external context</String>
          </Annotation>
        </Property>
        <Property Name="Text" Type="Edm.String" Nullable="true">
          <Annotation Term="Core.IsLanguageDependent" />
          <Annotation Term="Core.Description" String="Name of the selection variant" />
        </Property>
        <Property Name="Parameters" Type="Collection(UI.ParameterAbstract)" Nullable="false" />
        <Property Name="FilterExpression" Type="Edm.String" Nullable="true">
          <Annotation Term="Core.Description">
            <String>Filter string for query part of URL, without '$filter ='</String>
          </Annotation>
        </Property>
        <Property Name="SelectOptions" Type="Collection(UI.SelectOptionType)" Nullable="false">
          <Annotation Term="Core.Description">
            <String>ABAP Select Options Pattern</String>
          </Annotation>
        </Property>
      </ComplexType>

      <ComplexType Name="ParameterAbstract" Abstract="true" />
      <ComplexType Name="Parameter" BaseType="UI.ParameterAbstract">
        <Property Name="PropertyName" Type="Edm.PropertyPath" Nullable="false" />
        <Property Name="PropertyValue" Type="Edm.PrimitiveType" Nullable="false" />
      </ComplexType>
      <ComplexType Name="IntervalParameter" BaseType="UI.ParameterAbstract">
        <Property Name="PropertyNameFrom" Type="Edm.PropertyPath" Nullable="false" />
        <Property Name="PropertyValueFrom" Type="Edm.PrimitiveType" Nullable="false" />
        <Property Name="PropertyNameTo" Type="Edm.PropertyPath" Nullable="false" />
        <Property Name="PropertyValueTo" Type="Edm.PrimitiveType" Nullable="false" />
      </ComplexType>

      <ComplexType Name="SelectOptionType">
        <Property Name="PropertyName" Type="Edm.PropertyPath" Nullable="false" />
        <Property Name="Ranges" Type="Collection(UI.SelectionRangeType)" Nullable="false" />
      </ComplexType>

      <ComplexType Name="SelectionRangeType">
        <Annotation Term="Core.Description">
          <String>If the range option only requires a single value, the value must be in the property Low</String>
        </Annotation>
        <Property Name="Sign" Type="UI.SelectionRangeSignType" Nullable="false" />
        <Property Name="Option" Type="UI.SelectionRangeOptionType" Nullable="false" />
        <Property Name="Low" Type="Edm.PrimitiveType" Nullable="false" />
        <Property Name="High" Type="Edm.PrimitiveType" />
      </ComplexType>

      <EnumType Name="SelectionRangeSignType">
        <Member Name="I">
          <Annotation Term="Core.Description" String="Inclusive" />
        </Member>
        <Member Name="E">
          <Annotation Term="Core.Description" String="Exclusive" />
        </Member>
      </EnumType>

      <EnumType Name="SelectionRangeOptionType">
        <Member Name="EQ">
          <Annotation Term="Core.Description" String="Equal to" />
        </Member>
        <Member Name="BT">
          <Annotation Term="Core.Description" String="Between" />
        </Member>
        <Member Name="CP">
          <Annotation Term="Core.Description" String="Contains pattern" />
        </Member>
        <Member Name="LE">
          <Annotation Term="Core.Description" String="Less than or equal to" />
        </Member>
        <Member Name="GE">
          <Annotation Term="Core.Description" String="Greater than or equal to" />
        </Member>
        <Member Name="NE">
          <Annotation Term="Core.Description" String="Not equal to" />
        </Member>
        <Member Name="NB">
          <Annotation Term="Core.Description" String="Not between" />
        </Member>
        <Member Name="NP">
          <Annotation Term="Core.Description" String="Does not contain pattern" />
        </Member>
        <Member Name="GT">
          <Annotation Term="Core.Description" String="Greater than" />
        </Member>
        <Member Name="LT">
          <Annotation Term="Core.Description" String="Less than" />
        </Member>
      </EnumType>


      <!-- basic type definitions for reuse goes here -->

      <Term Name="ThingPerspective" Type="Core.Tag" DefaultValue="true" AppliesTo="Term">
        <Annotation Term="Core.Description" String="This term is a Thing Perspective" />
      </Term>
      <Term Name="IsSummary" Type="Core.Tag" DefaultValue="true" AppliesTo="Record">
        <Annotation Term="Core.Description"
          String="This Facet and all included Facets are the summary of the thing. At most one Facet of a thing can be tagged with this term" />
        <Annotation Term="Core.RequiresType" String="UI.Facet" />
      </Term>
      <Term Name="PartOfPreview" Type="Core.Tag" DefaultValue="true" AppliesTo="Record">
        <Annotation Term="Core.Description" String="This Facet and all included Facets are part of the Thing preview" />
        <Annotation Term="Core.RequiresType" String="UI.Facet" />
      </Term>
      <Term Name="Map" Type="Core.Tag" DefaultValue="true" AppliesTo="Record">
        <Annotation Term="Core.Description" String="Target MUST reference a UI.GeoLocation, vCard.Address or a collection of these" />
        <Annotation Term="Core.RequiresType" String="UI.ReferenceFacet" />
      </Term>
      <!-- To be discussed, please don't deliver -->
      <Term Name="Gallery" Type="Core.Tag" DefaultValue="true" AppliesTo="Record">
        <Annotation Term="Core.Description" String="Target MUST reference a UI.MediaResource" />
        <Annotation Term="Core.RequiresType" String="UI.ReferenceFacet" />
      </Term>
      <!-- To be discussed, please don't deliver -->

      <Term Name="IsImageURL" Type="Core.Tag" DefaultValue="true" AppliesTo="Property Term">
        <Annotation Term="Core.Description"
          String="Properties and terms annotated with this term MUST contain a valid URL referencing an resource with a MIME type image" />
        <Annotation Term="Core.RequiresType" String="Edm.String" />
      </Term>
      <Term Name="MultiLineText" Type="Core.Tag" DefaultValue="true" AppliesTo="Property">
        <Annotation Term="Core.Description"
          String="Properties annotated with this annotation should be rendered as multi-line text (e.g. text area)" />
        <Annotation Term="Core.RequiresType" String="Edm.String" />
      </Term>
      <!-- not ready yet, wait for UI5 concerning the format of that value
        <Term Name="DisplayTimeZone" Type="Edm.Int32" AppliesTo="Property">
        <Annotation Term="Core.Description">
        <String>Contains information for time- or date-time-fields in which time zone the time value should be displayed.</String>
        </Annotation>
        </Term>
      -->

      <Term Name="Importance" Type="UI.ImportanceType" AppliesTo="Annotation Record">
        <Annotation Term="Core.Description" String="Expresses the importance of e.g. a DataField or an annotation" />
      </Term>
      <EnumType Name="ImportanceType">
        <Member Name="High" />
        <Member Name="Medium" />
        <Member Name="Low" />
      </EnumType>

      <ComplexType Name="DataFieldAbstract" Abstract="true">
        <Property Name="Label" Type="Edm.String" Nullable="true">
          <Annotation Term="Core.IsLanguageDependent" />
        </Property>
        <Property Name="Criticality" Type="UI.CriticalityType" Nullable="true" />
        <Property Name="IconUrl" Type="Edm.String" Nullable="true">
          <Annotation Term="Core.IsUrl" />
        </Property>
      </ComplexType>

      <ComplexType Name="DataFieldForAnnotation" BaseType="UI.DataFieldAbstract">
        <Property Name="Target" Type="Edm.AnnotationPath">
          <Annotation Term="Core.Description" String="Annotation path MUST end in vCard.Contact, vCard.Address or UI.DataPoint" />
        </Property>
      </ComplexType>

      <ComplexType Name="DataFieldForAction" BaseType="UI.DataFieldAbstract">
        <Property Name="Action" Type="Common.QualifiedName" Nullable="false">
          <Annotation Term="Core.Description" String="Qualified name of an Action, Function, ActionImport or FunctionImport in scope" />
        </Property>
      </ComplexType>

      <ComplexType Name="DataFieldForIntentBasedNavigation" BaseType="UI.DataFieldAbstract">
        <Property Name="SemanticObject" Type="Edm.String" Nullable="false">
          <Annotation Term="Core.Description" String="Name of the Semantic Object" />
        </Property>
        <Property Name="Action" Type="Edm.String">
          <Annotation Term="Core.Description"
            String="Name of the Action on the Semantic Object. If not specified, let user choose which of the available actions to trigger." />
        </Property>
      </ComplexType>

      <ComplexType Name="DataField" BaseType="UI.DataFieldAbstract">
        <Property Name="Value" Type="Edm.PrimitiveType" Nullable="false">
          <Annotation Term="Core.IsLanguageDependent" />
        </Property>
      </ComplexType>

      <ComplexType Name="DataFieldWithNavigationPath" BaseType="UI.DataField">
        <Property Name="Target" Type="Edm.NavigationPropertyPath" Nullable="false">
          <Annotation Term="Core.Description">
            <String>Contains either a navigation property or a term cast, where term is of type Edm.EntityType or a concrete entity type or a collection of these types</String>
          </Annotation>
        </Property>
      </ComplexType>

      <ComplexType Name="DataFieldWithUrl" BaseType="UI.DataField">
        <Property Name="Url" Type="Edm.String" Nullable="false">
          <Annotation Term="Core.IsURL" />
        </Property>
        <Property Name="UrlContentType" Type="Edm.String" Nullable="true">
          <Annotation Term="Core.IsMediaType" />
        </Property>
      </ComplexType>

    </Schema>
  </edmx:DataServices>
</edmx:Edmx>
