sap.ui.define(["sap/fe/test/JestTemplatingHelper", "path"], function (JestTemplatingHelper, path) {
  "use strict";

  var compileCDS = JestTemplatingHelper.compileCDS;
  var getControlAttribute = JestTemplatingHelper.getControlAttribute;
  var getTemplatingResult = JestTemplatingHelper.getTemplatingResult;
  var sMetadataUrl = compileCDS(path.join(__dirname, "./data/FieldMacroWithSemanticKey.cds"));
  describe("MacroField for a semantic Key", function () {
    var mBindingContexts = {
      "entitySet": "/Items"
    };
    describe("- semanticKeyStyle = ObjectIdentifier ", function () {
      it("Semantic Key and non -draft root", function () {
        try {
          var nonDraftBindingContext = {
            "entitySet": "/SubItems"
          };
          var xmlField = "<internalMacro:Field xmlns:internalMacro=\"sap.fe.macros.internal\"\n\t\t\t\t\t\t\t\t\tentitySet=\"{entitySet>}\"\n\t\t\t\t\t\t\t\t\tdataField=\"@com.sap.vocabularies.UI.v1.LineItem/1\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<internalMacro:formatOptions semanticKeyStyle=\"ObjectIdentifier\"/>\n\t\t\t\t\t\t\t\t\t</internalMacro:Field>";
          return Promise.resolve(getTemplatingResult(xmlField, sMetadataUrl, nonDraftBindingContext, {})).then(function (domResult) {
            expect(domResult).toHaveControl("/macros:FieldAPI/control:FieldWrapper/control:contentDisplay/m:ObjectIdentifier");
          });
        } catch (e) {
          return Promise.reject(e);
        }
      });
      it("Semantic Key and draft root", function () {
        try {
          var xmlField = "<internalMacro:Field xmlns:internalMacro=\"sap.fe.macros.internal\"\n\t\t\t\t\t\t\t\t\tentitySet=\"{entitySet>}\"\n\t\t\t\t\t\t\t\t\tdataField=\"@com.sap.vocabularies.UI.v1.LineItem/0\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<internalMacro:formatOptions semanticKeyStyle=\"ObjectIdentifier\"/>\n\t\t\t\t\t\t\t\t\t</internalMacro:Field>";
          return Promise.resolve(getTemplatingResult(xmlField, sMetadataUrl, mBindingContexts, {})).then(function (domResult) {
            expect(domResult).toHaveControl("/macros:FieldAPI/control:FieldWrapper/control:contentDisplay/control:FormElementWrapper/m:Vbox/m:ObjectIdentifier");
            expect(domResult).toHaveControl("/macros:FieldAPI/control:FieldWrapper/control:contentDisplay/control:FormElementWrapper/m:Vbox/m:ObjectMarker");
            expect(domResult).toHaveControl("/macros:FieldAPI/control:FieldWrapper/control:contentEdit/m:Input");
          });
        } catch (e) {
          return Promise.reject(e);
        }
      });
      it("Semantic Key with a semantic Object ", function () {
        try {
          var xmlField = "<internalMacro:Field xmlns:internalMacro=\"sap.fe.macros.internal\"\n\t\t\t\t\t\t\t\t\tentitySet=\"{entitySet>}\"\n\t\t\t\t\t\t\t\t\tdataField=\"@com.sap.vocabularies.UI.v1.LineItem/1\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<internalMacro:formatOptions semanticKeyStyle=\"ObjectIdentifier\"/>\n\t\t\t\t\t\t\t\t\t</internalMacro:Field>";
          return Promise.resolve(getTemplatingResult(xmlField, sMetadataUrl, mBindingContexts, {})).then(function (domResult) {
            expect(domResult).toHaveControl("/macros:FieldAPI/control:FieldWrapper/control:contentDisplay/control:FormElementWrapper/m:Vbox/m:ObjectIdentifier/m:dependents/mdc:Link");
            expect(getControlAttribute("/macros:FieldAPI/control:FieldWrapper/control:contentDisplay/control:FormElementWrapper/m:Vbox/m:ObjectIdentifier", "titleActive", domResult)).toEqual( //"{parts:[{path:'" + sBindingPath + "'}], formatter:'FieldRuntime.hasTargets'}";
            "{parts:[{path:'pageInternal>semanticsTargets/SubItems/_Items_keyWithSemanticObject/HasTargetsNotFiltered'}], formatter:'FieldRuntime.hasTargets'}");
            expect(domResult).toHaveControl("/macros:FieldAPI/control:FieldWrapper/control:contentDisplay/control:FormElementWrapper/m:Vbox/m:ObjectMarker");
          });
        } catch (e) {
          return Promise.reject(e);
        }
      });
      it("property with a semantic key", function () {
        try {
          var xmlField = "<internalMacro:Field xmlns:internalMacro=\"sap.fe.macros.internal\"\n\t\t\t\t\t\t\t\t\tentitySet=\"{entitySet>}\"\n\t\t\t\t\t\t\t\t\tdataField=\"keyWithSemanticObject\">\n\t\t\t\t\t\t\t\t\t<internalMacro:formatOptions semanticKeyStyle=\"ObjectIdentifier\"/>\n\t\t\t\t\t\t\t\t\t</internalMacro:Field>";
          return Promise.resolve(getTemplatingResult(xmlField, sMetadataUrl, mBindingContexts, {})).then(function (domResult) {
            expect(domResult).toHaveControl("/macros:FieldAPI/control:FieldWrapper/control:contentDisplay/control:FormElementWrapper/m:Vbox/m:ObjectIdentifier/m:dependents/mdc:Link");
            expect(getControlAttribute("/macros:FieldAPI/control:FieldWrapper/control:contentDisplay/control:FormElementWrapper/m:Vbox/m:ObjectIdentifier", "titleActive", domResult)).toEqual( //"{parts:[{path:'" + sBindingPath + "'}], formatter:'FieldRuntime.hasTargets'}";
            "{parts:[{path:'pageInternal>semanticsTargets/SubItems/_Items_keyWithSemanticObject/HasTargetsNotFiltered'}], formatter:'FieldRuntime.hasTargets'}");
            expect(domResult).toHaveControl("/macros:FieldAPI/control:FieldWrapper/control:contentDisplay/control:FormElementWrapper/m:Vbox/m:ObjectMarker");
          });
        } catch (e) {
          return Promise.reject(e);
        }
      });
    });
    describe("- semanticKeyStyle = Label (in Table except ResponsiveTable) ", function () {
      it("Semantic Key on draft root entity", function () {
        try {
          var xmlField = "<internalMacro:Field xmlns:internalMacro=\"sap.fe.macros.internal\"\n\t\t\t\t\t\t\t\t\tentitySet=\"{entitySet>}\"\n\t\t\t\t\t\t\t\t\tdataField=\"@com.sap.vocabularies.UI.v1.LineItem/0\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<internalMacro:formatOptions semanticKeyStyle=\"Label\"/>\n\t\t\t\t\t\t\t\t\t</internalMacro:Field>";
          return Promise.resolve(getTemplatingResult(xmlField, sMetadataUrl, mBindingContexts, {})).then(function (domResult) {
            expect(domResult).toHaveControl("/macros:FieldAPI/control:FieldWrapper/control:contentDisplay/control:FormElementWrapper/m:Vbox/m:Label");
            expect(getControlAttribute("/macros:FieldAPI/control:FieldWrapper/control:contentDisplay/control:FormElementWrapper/m:Vbox/m:Label", "design", domResult)).toEqual("Bold");
            expect(domResult).toHaveControl("/macros:FieldAPI/control:FieldWrapper/control:contentDisplay/control:FormElementWrapper/m:Vbox/m:ObjectMarker");
            expect(domResult).toHaveControl("/macros:FieldAPI/control:FieldWrapper/control:contentEdit/m:Input");
          });
        } catch (e) {
          return Promise.reject(e);
        }
      });
      it("Semantic Key with a semantic Object ", function () {
        try {
          var xmlField = "<internalMacro:Field xmlns:internalMacro=\"sap.fe.macros.internal\"\n\t\t\t\t\t\t\t\t\tentitySet=\"{entitySet>}\"\n\t\t\t\t\t\t\t\t\tdataField=\"@com.sap.vocabularies.UI.v1.LineItem/1\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<internalMacro:formatOptions semanticKeyStyle=\"Label\"/>\n\t\t\t\t\t\t\t\t\t</internalMacro:Field>";
          return Promise.resolve(getTemplatingResult(xmlField, sMetadataUrl, mBindingContexts, {})).then(function (domResult) {
            expect(domResult).toHaveControl("/macros:FieldAPI/control:FieldWrapper/control:contentDisplay/control:FormElementWrapper/m:VBox/control:ConditionalWrapper/control:contentTrue/m:Link/m:dependents/mdc:Link");
            expect(domResult).toHaveControl("/macros:FieldAPI/control:FieldWrapper/control:contentDisplay/control:FormElementWrapper/m:VBox/control:ConditionalWrapper/control:contentFalse/m:Label");
            expect(getControlAttribute("/macros:FieldAPI/control:FieldWrapper/control:contentDisplay/control:FormElementWrapper/m:VBox/control:ConditionalWrapper", "condition", domResult)).toEqual("{parts:[{path:'pageInternal>semanticsTargets/SubItems/_Items_keyWithSemanticObject/HasTargetsNotFiltered'}], formatter:'FieldRuntime.hasTargets'}");
          });
        } catch (e) {
          return Promise.reject(e);
        }
      });
      it("property with a semantic key", function () {
        try {
          var xmlField = "<internalMacro:Field xmlns:internalMacro=\"sap.fe.macros.internal\"\n\t\t\t\t\t\t\t\t\tentitySet=\"{entitySet>}\"\n\t\t\t\t\t\t\t\t\tdataField=\"keyWithSemanticObject\">\n\t\t\t\t\t\t\t\t\t<internalMacro:formatOptions semanticKeyStyle=\"Label\"/>\n\t\t\t\t\t\t\t\t\t</internalMacro:Field>";
          return Promise.resolve(getTemplatingResult(xmlField, sMetadataUrl, mBindingContexts, {})).then(function (domResult) {
            expect(domResult).toHaveControl("/macros:FieldAPI/control:FieldWrapper/control:contentDisplay/control:FormElementWrapper/m:VBox/control:ConditionalWrapper/control:contentTrue/m:Link/m:dependents/mdc:Link");
            expect(domResult).toHaveControl("/macros:FieldAPI/control:FieldWrapper/control:contentDisplay/control:FormElementWrapper/m:VBox/control:ConditionalWrapper/control:contentFalse/m:Label");
            expect(getControlAttribute("/macros:FieldAPI/control:FieldWrapper/control:contentDisplay/control:FormElementWrapper/m:VBox/control:ConditionalWrapper", "condition", domResult)).toEqual("{parts:[{path:'pageInternal>semanticsTargets/SubItems/_Items_keyWithSemanticObject/HasTargetsNotFiltered'}], formatter:'FieldRuntime.hasTargets'}");
          });
        } catch (e) {
          return Promise.reject(e);
        }
      });
    });
    describe("- semanticKeyStyle = None (Forms) ", function () {
      it("Semantic Key on draft root entity", function () {
        try {
          var xmlField = "<internalMacro:Field xmlns:internalMacro=\"sap.fe.macros.internal\"\n\t\t\t\t\t\t\t\t\tentitySet=\"{entitySet>}\"\n\t\t\t\t\t\t\t\t\tdataField=\"@com.sap.vocabularies.UI.v1.FieldGroup#foo/Data/0\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t</internalMacro:Field>";
          return Promise.resolve(getTemplatingResult(xmlField, sMetadataUrl, mBindingContexts, {})).then(function (domResult) {
            expect(domResult).toHaveControl("/macros:FieldAPI/control:FieldWrapper/control:contentDisplay/m:Text");
          });
        } catch (e) {
          return Promise.reject(e);
        }
      });
      it("Semantic Key with a semantic Object ", function () {
        try {
          var xmlField = "<internalMacro:Field xmlns:internalMacro=\"sap.fe.macros.internal\"\n\t\t\t\t\t\t\t\t\tentitySet=\"{entitySet>}\"\n\t\t\t\t\t\t\t\t\tdataField=\"@com.sap.vocabularies.UI.v1.FieldGroup#foo/Data/1\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t</internalMacro:Field>";
          return Promise.resolve(getTemplatingResult(xmlField, sMetadataUrl, mBindingContexts, {})).then(function (domResult) {
            expect(domResult).toHaveControl("/macros:FieldAPI/control:FieldWrapper/control:contentDisplay/control:ConditionalWrapper/control:contentTrue/m:Link/m:dependents/mdc:Link");
            expect(domResult).toHaveControl("/macros:FieldAPI/control:FieldWrapper/control:contentDisplay/control:ConditionalWrapper/control:contentFalse/m:Text");
            expect(getControlAttribute("/macros:FieldAPI/control:FieldWrapper/control:contentDisplay/control:ConditionalWrapper", "condition", domResult)).toEqual("{parts:[{path:'pageInternal>semanticsTargets/SubItems/_Items_keyWithSemanticObject/HasTargetsNotFiltered'}], formatter:'FieldRuntime.hasTargets'}");
          });
        } catch (e) {
          return Promise.reject(e);
        }
      });
      it("property with a semantic key", function () {
        try {
          var xmlField = "<internalMacro:Field xmlns:internalMacro=\"sap.fe.macros.internal\"\n\t\t\t\t\t\t\t\t\tentitySet=\"{entitySet>}\"\n\t\t\t\t\t\t\t\t\tdataField=\"ID\">\n\t\t\t\t\t\t\t\t\t</internalMacro:Field>";
          return Promise.resolve(getTemplatingResult(xmlField, sMetadataUrl, mBindingContexts, {})).then(function (domResult) {
            expect(domResult).toNotHaveControl("/mdc:Field/mdc:contentDisplay");
          });
        } catch (e) {
          return Promise.reject(e);
        }
      });
    });
  });
  describe("MacroField for a property used in a navigation to entity with QuickViewFacets", function () {
    var mBindingContexts = {
      "entitySet": "/SubItems"
    };
    it("- works", function () {
      try {
        var xmlField = "<internalMacro:Field xmlns:internalMacro=\"sap.fe.macros.internal\"\n\t\t\t\t\t\t\t\t\tentitySet=\"{entitySet>}\"\n\t\t\t\t\t\t\t\t\tdataField=\"@com.sap.vocabularies.UI.v1.LineItem/0\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<internalMacro:formatOptions semanticKeyStyle=\"ObjectIdentifier\"/>\n\t\t\t\t\t\t\t\t\t</internalMacro:Field>";
        return Promise.resolve(getTemplatingResult(xmlField, sMetadataUrl, mBindingContexts, {})).then(function (domResult) {
          expect(domResult).toHaveControl("/macros:FieldAPI/control:FieldWrapper/control:contentDisplay/m:Link/m:dependents/mdc:Link");
          expect(getControlAttribute("/macros:FieldAPI/control:FieldWrapper/control:contentDisplay/m:Link/m:dependents/mdc:Link", "delegate", domResult)).toEqual('{"name":"sap/fe/macros/field/QuickViewLinkDelegate","payload":{"entityType":"/SubItems/lineItem","semanticObjectUnavailableActions":[],"semanticObjectMappings":[],"semanticPrimaryActions":[],"navigationPath":"{lineItem}"}}');
        });
      } catch (e) {
        return Promise.reject(e);
      }
    });
  });
  describe("DraftPopoverAdminData", function () {
    var sMetadataUrl = compileCDS(path.join(__dirname, "./data/AdminDataPopOver.cds"));
    var mBindingContexts = {
      "entityType": "/Items/$Type",
      "prop": "/"
    };
    it("Popover text has a valid binding", function () {
      try {
        var xml = "<core:Fragment xmlns:core=\"sap.ui.core\" fragmentName=\"sap.fe.macros.field.DraftPopOverAdminData\" type=\"XML\" />";
        return Promise.resolve(getTemplatingResult(xml, sMetadataUrl, mBindingContexts, {})).then(function (domResult) {
          expect(domResult).toHaveControl("/m:Popover/m:VBox/m:VBox/m:Text");
          expect(getControlAttribute("/m:Popover/m:VBox/m:VBox[3]/m:Text[1]", "text", domResult)).toEqual("{parts: [{path: 'HasDraftEntity', targetType: 'any'}, {path: 'DraftAdministrativeData/InProcessByUser'}, {path: 'DraftAdministrativeData/LastChangedByUser'} ], formatter: 'sap.fe.macros.field.FieldRuntime.formatDraftOwnerTextInPopover'}");
        });
      } catch (e) {
        return Promise.reject(e);
      }
    });
  });
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,