sap.ui.define(["sap/fe/macros/field/FieldTemplating", "path", "sap/fe/test/JestTemplatingHelper", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/BindingExpression"], function (FieldTemplating, path, JestTemplatingHelper, MetaModelConverter, BindingExpression) {
  "use strict";

  var ifElse = BindingExpression.ifElse;
  var compileBinding = BindingExpression.compileBinding;
  var bindingExpression = BindingExpression.bindingExpression;
  var convertTypes = MetaModelConverter.convertTypes;
  var evaluateBindingWithModel = JestTemplatingHelper.evaluateBindingWithModel;
  var getDataModelObjectPathForProperty = JestTemplatingHelper.getDataModelObjectPathForProperty;
  var getMetaModel = JestTemplatingHelper.getMetaModel;
  var compileCDS = JestTemplatingHelper.compileCDS;
  var addTextArrangementToBindingExpression = FieldTemplating.addTextArrangementToBindingExpression;
  var getBindingWithTextArrangement = FieldTemplating.getBindingWithTextArrangement;
  describe("Field Templating Testing", function () {
    var convertedTypes;
    var entitySet;
    var entityType;
    var properties = {};
    beforeAll(function () {
      try {
        var sMetadataUrl = compileCDS(path.join(__dirname, "./FieldTemplating.cds"));
        return Promise.resolve(getMetaModel(sMetadataUrl)).then(function (metaModel) {
          convertedTypes = convertTypes(metaModel);
          var maybeEntitySet = convertedTypes.entitySets.find(function (et) {
            return et.name === "getBindingWithTextArrangement";
          });

          if (maybeEntitySet) {
            entitySet = maybeEntitySet;
            entityType = maybeEntitySet.entityType;
            entityType.entityProperties.forEach(function (prop) {
              properties[prop.name] = prop;
            });
          } else {
            throw new Error("Error in test setup");
          }
        });
      } catch (e) {
        return Promise.reject(e);
      }
    });
    it("#getBindingWithTextArrangement", function () {
      // Cases to consider
      // TextOnly
      var textOnlyBinding = getBindingWithTextArrangement(getDataModelObjectPathForProperty(entitySet, properties["textOnly"]), bindingExpression("textOnly"));
      expect(textOnlyBinding).toMatchSnapshot();
      expect(compileBinding(textOnlyBinding)).toContain("targetText");
      expect(evaluateBindingWithModel(compileBinding(textOnlyBinding), {
        targetText: "Yolo"
      })).toEqual("Yolo"); // No text arrangement

      var noTextBinding = getBindingWithTextArrangement(getDataModelObjectPathForProperty(entitySet, properties["noText"]), bindingExpression("noText"));
      expect(noTextBinding).toMatchSnapshot();
      expect(compileBinding(noTextBinding)).toContain("noText");
      expect(evaluateBindingWithModel(compileBinding(noTextBinding), {
        noText: "Yolo"
      })).toEqual("Yolo"); // TextFirst

      var textFirstBinding = getBindingWithTextArrangement(getDataModelObjectPathForProperty(entitySet, properties["textFirst"]), bindingExpression("textFirst"));
      expect(textFirstBinding).toMatchSnapshot();
      expect(compileBinding(textFirstBinding)).toContain("textFirst");
      expect(compileBinding(textFirstBinding)).toContain("targetText");
      expect(evaluateBindingWithModel(compileBinding(textFirstBinding), {
        textFirst: "Yolo Last",
        targetText: "Yolo Description"
      })).toEqual("Yolo Description (Yolo Last)"); // TextLast

      var textLastBinding = getBindingWithTextArrangement(getDataModelObjectPathForProperty(entitySet, properties["textLast"]), bindingExpression("textLast"));
      expect(textLastBinding).toMatchSnapshot();
      expect(compileBinding(textLastBinding)).toContain("textLast");
      expect(compileBinding(textLastBinding)).toContain("targetText");
      expect(evaluateBindingWithModel(compileBinding(textLastBinding), {
        textLast: "Yolo First",
        targetText: "Yolo Description"
      })).toEqual("Yolo First (Yolo Description)");
    });
    it("#addTextArrangementToBindingExpression", function () {
      var fullContext = getDataModelObjectPathForProperty(entitySet);
      var otherModelBinding = addTextArrangementToBindingExpression(bindingExpression("textLast", "otherModel"), fullContext);
      expect(otherModelBinding).toMatchSnapshot();
      expect(compileBinding(otherModelBinding)).toContain("textLast");
      expect(compileBinding(otherModelBinding)).not.toContain("targetText");
      var addTextLastBinding = addTextArrangementToBindingExpression(bindingExpression("textLast"), fullContext);
      expect(addTextLastBinding).toMatchSnapshot();
      expect(compileBinding(addTextLastBinding)).toContain("textLast");
      expect(compileBinding(addTextLastBinding)).toContain("targetText");
      expect(evaluateBindingWithModel(compileBinding(addTextLastBinding), {
        textLast: "Yolo First",
        targetText: "Yolo Description"
      })).toEqual("Yolo First (Yolo Description)");
      var complexTextBinding = addTextArrangementToBindingExpression(ifElse(bindingExpression("testProp"), bindingExpression("textLast"), bindingExpression("noText")), fullContext);
      expect(complexTextBinding).toMatchSnapshot();
      expect(compileBinding(complexTextBinding)).toContain("textLast");
      expect(compileBinding(complexTextBinding)).toContain("targetText");
      var modelContent = {
        testProp: true,
        textLast: "Yolo First",
        targetText: "Yolo Description",
        noText: "Not Yolo"
      };
      expect(evaluateBindingWithModel(compileBinding(complexTextBinding), modelContent)).toEqual("Yolo First (Yolo Description)");
      modelContent.testProp = false;
      expect(evaluateBindingWithModel(compileBinding(complexTextBinding), modelContent)).toEqual("Not Yolo");
    });
  });
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,