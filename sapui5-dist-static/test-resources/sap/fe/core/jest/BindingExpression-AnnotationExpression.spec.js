sap.ui.define(["path", "sap/fe/test/JestTemplatingHelper", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/BindingExpression", "sap/ui/base/BindingParser"], function (path, JestTemplatingHelper, MetaModelConverter, BindingExpression, BindingParser) {
  "use strict";

  var compileBinding = BindingExpression.compileBinding;
  var annotationExpression = BindingExpression.annotationExpression;
  var convertTypes = MetaModelConverter.convertTypes;
  var getMetaModel = JestTemplatingHelper.getMetaModel;
  describe("Binding Expressions - Annotation Expression Support", function () {
    var convertedTypes;
    var entityType;
    var properties = {};
    beforeAll(function () {
      try {
        return Promise.resolve(getMetaModel(path.resolve(__dirname, "data", "BindingExpression-AnnotationExpression.xml"))).then(function (metaModel) {
          convertedTypes = convertTypes(metaModel);
          var maybeEntityType = convertedTypes.entityTypes.find(function (et) {
            return et.name === "Items";
          });

          if (maybeEntityType) {
            entityType = maybeEntityType;
            entityType.entityProperties.forEach(function (prop) {
              properties[prop.name] = prop;
            });
          } else {
            throw new Error("Error in test setup");
          }
        });
      } catch (e) {
        return Promise.reject(e);
      }
    });
    it("Basic tests", function () {
      var _properties$constantV, _properties$pathValue;

      expect(compileBinding(annotationExpression((_properties$constantV = properties.constantValue.annotations.UI) === null || _properties$constantV === void 0 ? void 0 : _properties$constantV.Hidden))).toEqual("true");
      expect(compileBinding(annotationExpression((_properties$pathValue = properties.pathValue.annotations.UI) === null || _properties$pathValue === void 0 ? void 0 : _properties$pathValue.Hidden))).toEqual("{constantValue}");
    });
    it("Concat tests", function () {
      var _properties$concatVal, _properties$concatPat, _properties$concatIfV, _properties$ifValue$a, _properties$ifConcatV;

      expect(compileBinding(annotationExpression((_properties$concatVal = properties.concatValue.annotations.Common) === null || _properties$concatVal === void 0 ? void 0 : _properties$concatVal.Text))).toEqual("YoLo");
      expect(compileBinding(annotationExpression((_properties$concatPat = properties.concatPathValue.annotations.Common) === null || _properties$concatPat === void 0 ? void 0 : _properties$concatPat.Text))).toEqual("{= 'Yo' + %{constantValue} + 'Lo' }");
      expect(compileBinding(annotationExpression((_properties$concatIfV = properties.concatIfValue.annotations.Common) === null || _properties$concatIfV === void 0 ? void 0 : _properties$concatIfV.Text))).toEqual("{= 'Yo' + (%{constantValue} === 'Yolo' ? 'Lo' : 'NotLo') }");
      expect(compileBinding(annotationExpression((_properties$ifValue$a = properties.ifValue.annotations.Common) === null || _properties$ifValue$a === void 0 ? void 0 : _properties$ifValue$a.Text))).toEqual("{= %{constantValue} === 'Yolo' ? 'true' : 'false'}");
      expect(compileBinding(annotationExpression((_properties$ifConcatV = properties.ifConcatValue.annotations.Common) === null || _properties$ifConcatV === void 0 ? void 0 : _properties$ifConcatV.Text))).toEqual("{= %{constantValue} === 'Yo' + %{pathValue} ? 'True' : 'False'}");
    });
    it("Concat Value tests", function () {
      var _properties$concatPat2, _properties$concatIfV2, _properties$ifValue$a2, _properties$ifConcatV2;

      var concatPathValue = compileBinding(annotationExpression((_properties$concatPat2 = properties.concatPathValue.annotations.Common) === null || _properties$concatPat2 === void 0 ? void 0 : _properties$concatPat2.Text));
      var concatPathValueExpression = BindingParser.complexParser(concatPathValue);
      expect(concatPathValueExpression.formatter("John")).toEqual("YoJohnLo");
      var concatIfValue = compileBinding(annotationExpression((_properties$concatIfV2 = properties.concatIfValue.annotations.Common) === null || _properties$concatIfV2 === void 0 ? void 0 : _properties$concatIfV2.Text));
      var concatIfValueExpression = BindingParser.complexParser(concatIfValue);
      expect(concatIfValueExpression.formatter("Yolo")).toEqual("YoLo");
      expect(concatIfValueExpression.formatter("NotYolo")).toEqual("YoNotLo");
      var ifValue = compileBinding(annotationExpression((_properties$ifValue$a2 = properties.ifValue.annotations.Common) === null || _properties$ifValue$a2 === void 0 ? void 0 : _properties$ifValue$a2.Text));
      var ifValueExpression = BindingParser.complexParser(ifValue);
      expect(ifValueExpression.formatter("Yolo")).toEqual("true");
      expect(ifValueExpression.formatter("NotYolo")).toEqual("false");
      var ifConcatValue = compileBinding(annotationExpression((_properties$ifConcatV2 = properties.ifConcatValue.annotations.Common) === null || _properties$ifConcatV2 === void 0 ? void 0 : _properties$ifConcatV2.Text));
      var ifConcatValueExpression = BindingParser.complexParser(ifConcatValue);
      expect(ifConcatValueExpression.formatter("John", "Doe")).toEqual("False");
      expect(ifConcatValueExpression.formatter("YoDoe", "Doe")).toEqual("True");
    });
  });
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,