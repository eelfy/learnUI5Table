sap.ui.define(["path", "sap/fe/core/converters/MetaModelConverter", "sap/fe/test/JestTemplatingHelper", "sap/fe/core/templating/PropertyHelper", "sap/fe/core/helpers/BindingExpression"], function (path, MetaModelConverter, JestTemplatingHelper, PropertyHelper, BindingExpression) {
  "use strict";

  var compileBinding = BindingExpression.compileBinding;
  var isReadOnlyExpression = PropertyHelper.isReadOnlyExpression;
  var isDisabledExpression = PropertyHelper.isDisabledExpression;
  var getMetaModel = JestTemplatingHelper.getMetaModel;
  var compileCDS = JestTemplatingHelper.compileCDS;
  var convertTypes = MetaModelConverter.convertTypes;
  var convertedTypes;
  var entityType;
  var properties = {};
  beforeAll(function () {
    try {
      var sMetadataUrl = compileCDS(path.join(__dirname, "../data/PropertyHelper.cds"));
      return Promise.resolve(getMetaModel(sMetadataUrl)).then(function (metaModel) {
        convertedTypes = convertTypes(metaModel);
        var maybeEntityType = convertedTypes.entityTypes.find(function (et) {
          return et.name === "TestEntity";
        });

        if (maybeEntityType) {
          entityType = maybeEntityType;
          entityType.entityProperties.forEach(function (prop) {
            properties[prop.name] = prop;
          });
        } else {
          throw new Error("Error in test setup");
        }
      });
    } catch (e) {
      return Promise.reject(e);
    }
  });
  describe("PropertyHelper", function () {
    it("#isReadOnlyExpression", function () {
      expect(isReadOnlyExpression(properties["FieldControlReadOnly"])).toEqual(true);
      expect(isReadOnlyExpression(properties["FieldControlInapplicable"])).toEqual(false);
      expect(compileBinding(isReadOnlyExpression(properties["FieldControlDynamic"]))).toEqual("{= %{FieldControlValue} === 1}");
    });
    it("#isDisabledExpression", function () {
      expect(isDisabledExpression(properties["FieldControlReadOnly"])).toEqual(false);
      expect(isDisabledExpression(properties["FieldControlInapplicable"])).toEqual(true);
      expect(compileBinding(isDisabledExpression(properties["FieldControlDynamic"]))).toEqual("{= %{FieldControlValue} === 0}");
    });
  });
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlByb3BlcnR5SGVscGVyLnNwZWMudHMiXSwibmFtZXMiOlsiY29udmVydGVkVHlwZXMiLCJlbnRpdHlUeXBlIiwicHJvcGVydGllcyIsImJlZm9yZUFsbCIsInNNZXRhZGF0YVVybCIsImNvbXBpbGVDRFMiLCJwYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsImdldE1ldGFNb2RlbCIsIm1ldGFNb2RlbCIsImNvbnZlcnRUeXBlcyIsIm1heWJlRW50aXR5VHlwZSIsImVudGl0eVR5cGVzIiwiZmluZCIsImV0IiwibmFtZSIsImVudGl0eVByb3BlcnRpZXMiLCJmb3JFYWNoIiwicHJvcCIsIkVycm9yIiwiZGVzY3JpYmUiLCJpdCIsImV4cGVjdCIsImlzUmVhZE9ubHlFeHByZXNzaW9uIiwidG9FcXVhbCIsImNvbXBpbGVCaW5kaW5nIiwiaXNEaXNhYmxlZEV4cHJlc3Npb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQU9BLE1BQUlBLGNBQUo7QUFDQSxNQUFJQyxVQUFKO0FBQ0EsTUFBTUMsVUFBb0MsR0FBRyxFQUE3QztBQUNBQyxFQUFBQSxTQUFTO0FBQUEsUUFBa0I7QUFDMUIsVUFBTUMsWUFBWSxHQUFHQyxVQUFVLENBQUNDLElBQUksQ0FBQ0MsSUFBTCxDQUFVQyxTQUFWLEVBQXFCLDRCQUFyQixDQUFELENBQS9CO0FBRDBCLDZCQUVGQyxZQUFZLENBQUNMLFlBQUQsQ0FGVixpQkFFcEJNLFNBRm9CO0FBRzFCVixRQUFBQSxjQUFjLEdBQUdXLFlBQVksQ0FBQ0QsU0FBRCxDQUE3QjtBQUNBLFlBQU1FLGVBQWUsR0FBR1osY0FBYyxDQUFDYSxXQUFmLENBQTJCQyxJQUEzQixDQUFnQyxVQUFBQyxFQUFFO0FBQUEsaUJBQUlBLEVBQUUsQ0FBQ0MsSUFBSCxLQUFZLFlBQWhCO0FBQUEsU0FBbEMsQ0FBeEI7O0FBSjBCLFlBS3RCSixlQUxzQjtBQU16QlgsVUFBQUEsVUFBVSxHQUFHVyxlQUFiO0FBQ0FYLFVBQUFBLFVBQVUsQ0FBQ2dCLGdCQUFYLENBQTRCQyxPQUE1QixDQUFvQyxVQUFBQyxJQUFJLEVBQUk7QUFDM0NqQixZQUFBQSxVQUFVLENBQUNpQixJQUFJLENBQUNILElBQU4sQ0FBVixHQUF3QkcsSUFBeEI7QUFDQSxXQUZEO0FBUHlCO0FBV3pCLGdCQUFNLElBQUlDLEtBQUosQ0FBVSxxQkFBVixDQUFOO0FBWHlCO0FBQUE7QUFhMUIsS0FiUTtBQUFBO0FBQUE7QUFBQSxJQUFUO0FBZUFDLEVBQUFBLFFBQVEsQ0FBQyxnQkFBRCxFQUFtQixZQUFXO0FBQ3JDQyxJQUFBQSxFQUFFLENBQUMsdUJBQUQsRUFBMEIsWUFBTTtBQUNqQ0MsTUFBQUEsTUFBTSxDQUFDQyxvQkFBb0IsQ0FBQ3RCLFVBQVUsQ0FBQyxzQkFBRCxDQUFYLENBQXJCLENBQU4sQ0FBaUV1QixPQUFqRSxDQUF5RSxJQUF6RTtBQUNBRixNQUFBQSxNQUFNLENBQUNDLG9CQUFvQixDQUFDdEIsVUFBVSxDQUFDLDBCQUFELENBQVgsQ0FBckIsQ0FBTixDQUFxRXVCLE9BQXJFLENBQTZFLEtBQTdFO0FBQ0FGLE1BQUFBLE1BQU0sQ0FBQ0csY0FBYyxDQUFDRixvQkFBb0IsQ0FBQ3RCLFVBQVUsQ0FBQyxxQkFBRCxDQUFYLENBQXJCLENBQWYsQ0FBTixDQUFnRnVCLE9BQWhGLENBQXdGLGdDQUF4RjtBQUNBLEtBSkMsQ0FBRjtBQUtBSCxJQUFBQSxFQUFFLENBQUMsdUJBQUQsRUFBMEIsWUFBTTtBQUNqQ0MsTUFBQUEsTUFBTSxDQUFDSSxvQkFBb0IsQ0FBQ3pCLFVBQVUsQ0FBQyxzQkFBRCxDQUFYLENBQXJCLENBQU4sQ0FBaUV1QixPQUFqRSxDQUF5RSxLQUF6RTtBQUNBRixNQUFBQSxNQUFNLENBQUNJLG9CQUFvQixDQUFDekIsVUFBVSxDQUFDLDBCQUFELENBQVgsQ0FBckIsQ0FBTixDQUFxRXVCLE9BQXJFLENBQTZFLElBQTdFO0FBQ0FGLE1BQUFBLE1BQU0sQ0FBQ0csY0FBYyxDQUFDQyxvQkFBb0IsQ0FBQ3pCLFVBQVUsQ0FBQyxxQkFBRCxDQUFYLENBQXJCLENBQWYsQ0FBTixDQUFnRnVCLE9BQWhGLENBQXdGLGdDQUF4RjtBQUNBLEtBSkMsQ0FBRjtBQUtBLEdBWE8sQ0FBUiIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7IGNvbnZlcnRUeXBlcyB9IGZyb20gXCJzYXAvZmUvY29yZS9jb252ZXJ0ZXJzL01ldGFNb2RlbENvbnZlcnRlclwiO1xuaW1wb3J0IHsgY29tcGlsZUNEUywgZ2V0TWV0YU1vZGVsIH0gZnJvbSBcInNhcC9mZS90ZXN0L0plc3RUZW1wbGF0aW5nSGVscGVyXCI7XG5pbXBvcnQgeyBFbnRpdHlUeXBlLCBQcm9wZXJ0eSB9IGZyb20gXCJAc2FwLXV4L2Fubm90YXRpb24tY29udmVydGVyXCI7XG5pbXBvcnQgeyBpc0Rpc2FibGVkRXhwcmVzc2lvbiwgaXNSZWFkT25seUV4cHJlc3Npb24gfSBmcm9tIFwic2FwL2ZlL2NvcmUvdGVtcGxhdGluZy9Qcm9wZXJ0eUhlbHBlclwiO1xuaW1wb3J0IHsgY29tcGlsZUJpbmRpbmcgfSBmcm9tIFwic2FwL2ZlL2NvcmUvaGVscGVycy9CaW5kaW5nRXhwcmVzc2lvblwiO1xuXG5sZXQgY29udmVydGVkVHlwZXM7XG5sZXQgZW50aXR5VHlwZTogRW50aXR5VHlwZTtcbmNvbnN0IHByb3BlcnRpZXM6IFJlY29yZDxzdHJpbmcsIFByb3BlcnR5PiA9IHt9O1xuYmVmb3JlQWxsKGFzeW5jIGZ1bmN0aW9uKCkge1xuXHRjb25zdCBzTWV0YWRhdGFVcmwgPSBjb21waWxlQ0RTKHBhdGguam9pbihfX2Rpcm5hbWUsIFwiLi4vZGF0YS9Qcm9wZXJ0eUhlbHBlci5jZHNcIikpO1xuXHRjb25zdCBtZXRhTW9kZWwgPSBhd2FpdCBnZXRNZXRhTW9kZWwoc01ldGFkYXRhVXJsKTtcblx0Y29udmVydGVkVHlwZXMgPSBjb252ZXJ0VHlwZXMobWV0YU1vZGVsKTtcblx0Y29uc3QgbWF5YmVFbnRpdHlUeXBlID0gY29udmVydGVkVHlwZXMuZW50aXR5VHlwZXMuZmluZChldCA9PiBldC5uYW1lID09PSBcIlRlc3RFbnRpdHlcIik7XG5cdGlmIChtYXliZUVudGl0eVR5cGUpIHtcblx0XHRlbnRpdHlUeXBlID0gbWF5YmVFbnRpdHlUeXBlO1xuXHRcdGVudGl0eVR5cGUuZW50aXR5UHJvcGVydGllcy5mb3JFYWNoKHByb3AgPT4ge1xuXHRcdFx0cHJvcGVydGllc1twcm9wLm5hbWVdID0gcHJvcDtcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBpbiB0ZXN0IHNldHVwXCIpO1xuXHR9XG59KTtcblxuZGVzY3JpYmUoXCJQcm9wZXJ0eUhlbHBlclwiLCBmdW5jdGlvbigpIHtcblx0aXQoXCIjaXNSZWFkT25seUV4cHJlc3Npb25cIiwgKCkgPT4ge1xuXHRcdGV4cGVjdChpc1JlYWRPbmx5RXhwcmVzc2lvbihwcm9wZXJ0aWVzW1wiRmllbGRDb250cm9sUmVhZE9ubHlcIl0pKS50b0VxdWFsKHRydWUpO1xuXHRcdGV4cGVjdChpc1JlYWRPbmx5RXhwcmVzc2lvbihwcm9wZXJ0aWVzW1wiRmllbGRDb250cm9sSW5hcHBsaWNhYmxlXCJdKSkudG9FcXVhbChmYWxzZSk7XG5cdFx0ZXhwZWN0KGNvbXBpbGVCaW5kaW5nKGlzUmVhZE9ubHlFeHByZXNzaW9uKHByb3BlcnRpZXNbXCJGaWVsZENvbnRyb2xEeW5hbWljXCJdKSkpLnRvRXF1YWwoXCJ7PSAle0ZpZWxkQ29udHJvbFZhbHVlfSA9PT0gMX1cIik7XG5cdH0pO1xuXHRpdChcIiNpc0Rpc2FibGVkRXhwcmVzc2lvblwiLCAoKSA9PiB7XG5cdFx0ZXhwZWN0KGlzRGlzYWJsZWRFeHByZXNzaW9uKHByb3BlcnRpZXNbXCJGaWVsZENvbnRyb2xSZWFkT25seVwiXSkpLnRvRXF1YWwoZmFsc2UpO1xuXHRcdGV4cGVjdChpc0Rpc2FibGVkRXhwcmVzc2lvbihwcm9wZXJ0aWVzW1wiRmllbGRDb250cm9sSW5hcHBsaWNhYmxlXCJdKSkudG9FcXVhbCh0cnVlKTtcblx0XHRleHBlY3QoY29tcGlsZUJpbmRpbmcoaXNEaXNhYmxlZEV4cHJlc3Npb24ocHJvcGVydGllc1tcIkZpZWxkQ29udHJvbER5bmFtaWNcIl0pKSkudG9FcXVhbChcIns9ICV7RmllbGRDb250cm9sVmFsdWV9ID09PSAwfVwiKTtcblx0fSk7XG59KTtcbiJdfQ==